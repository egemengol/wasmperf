#!/usr/bin/env python3.7

import logging
import os
import shutil
import subprocess
from abc import ABC, abstractmethod
from dataclasses import dataclass
from pathlib import Path
from typing import Any, Dict, List, NamedTuple, Optional, Type

import yaml

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s -- %(levelname)s -- %(message)s",
    datefmt="%H.%M.%S",
)


class ExpAbstract(ABC):
    @property
    @abstractmethod
    def make_command(self) -> str:
        pass

    @abstractmethod
    def run(self) -> None:
        pass

    @abstractmethod
    def __str__(self) -> str:
        pass

    @abstractmethod
    def get_log_file(self) -> Path:
        pass


@dataclass
class ExpDataMixin:
    name: str
    params: Dict[str, Any]
    repetitions: int
    browser: Optional[Path] = None

    def prepare(self):
        c = ["make", self.make_command]
        for k, v in self.params.items():
            c.append(f"{k}={v}")
        subprocess.run(
            c, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT
        )


class Experiment(ExpDataMixin, ExpAbstract):
    """Experiment class for typing check"""


@dataclass
class ExperimentNative(Experiment):
    def run(self) -> None:
        with open(self.get_log_file(), "wb") as f:
            for _ in range(self.repetitions):
                res = subprocess.run(["out/main"], stdout=subprocess.PIPE, check=True)
                f.write(res.stdout)
        logging.info(f"Finished measuring {self} {self.repetitions} times.")

    def __str__(self) -> str:
        params = " ".join([f"{k.lower()}={v}" for k, v in self.params.items()])
        return f"{self.name} native {params}"

    def get_log_file(self) -> Path:
        return Path("./logs/") / str(self)

    @property
    def make_command(self) -> str:
        return f"{self.name}_native"


class ExperimentWasm(Experiment):
    BROWSERS = [
        Path("/usr/bin/firefox"),
        Path("/usr/bin/google-chrome"),
    ]

    def run(self):
        wd = os.getcwd()
        os.chdir("./out")

        for p in self.BROWSERS:
            self.browser = p
            for _ in range(self.repetitions):
                res = subprocess.run(
                    [
                        "emrun",
                        "--browser",
                        p,
                        "--serve_after_close",
                        "--log_stdout",
                        self.get_log_file(),
                        "--verbose",
                        "index.html",
                    ],
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.DEVNULL,
                )
            logging.info(f"Finished measuring {p.name} {self.repetitions} times.")
        os.chdir(wd)


class ExperimentWasmSingle(ExperimentWasm):
    def __str__(self):
        params = " ".join([f"{k.lower()}={v}" for k, v in self.params.items()])
        return f"{self.name} wasm_single {params}"

    def get_log_file(self) -> Path:
        params = " ".join([f"{k.lower()}={v}" for k, v in self.params.items()])
        if self.browser is None:
            raise Exception("no browser is specified")
        return Path("../logs") / f"{self.name} wasm_single {self.browser.name} {params}"

    @property
    def make_command(self) -> str:
        return f"{self.name}_wasm_single"


class Lab(NamedTuple):
    experiments: List[Experiment]

    def prepare(self):
        for e in self.experiments:
            e.prepare()

    def run(self):
        for e in self.experiments:
            e.run()


##################


shutil.rmtree("logs", True)

os.makedirs("out", exist_ok=True)
os.mkdir("logs")

with open("experiments.yaml") as f:
    exs = yaml.load(f, Loader=yaml.SafeLoader)

experiments: List[Experiment] = []
for e in exs['algs']:
    arch = e["arch"].upper()
    c: Type[Experiment]
    if arch == "NATIVE":
        c = ExperimentNative
    elif arch == "WASM_SINGLE":
        c = ExperimentWasmSingle
    else:
        raise Exception("Not yet.")
    del e["arch"]
    experiments.append(c(**e))
lab = Lab(experiments)
lab.run()


def analyze():
    for p in sorted(Path("logs").iterdir()):
        with open(p) as f:
            durs = [l.strip() for l in f]
        print(p.name)
        print()
        print("\t" + "\t".join(durs))
        print()
        print()


analyze()
