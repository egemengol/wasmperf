#!/usr/bin/env python3.7

import subprocess
import os
from typing import NamedTuple, Dict, Any, List
from pathlib import Path
from dataclasses import dataclass
from enum import Enum, auto
import shutil
import yaml
import logging
from abc import abstractmethod, abstractproperty, ABC
import time

logging.basicConfig(
    level=logging.INFO, 
    format="%(asctime)s -- %(levelname)s -- %(message)s", 
    datefmt="%H.%M.%S",
)


@dataclass
class Experiment(ABC):
    name: str
    params: Dict[str, Any]
    repetitions: int

    @property
    @abstractmethod
    def make_command(self) -> str:
        pass

    def prepare(self):
        c = ["make", self.make_command]
        for k, v in self.params.items():
            c.append(f"{k}={v}")
        subprocess.run(c, check=True, stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)
    

    @abstractmethod
    def run(self) -> None:
        pass

    @abstractmethod
    def __str__(self) -> str:
        pass

    @abstractmethod
    def get_log_file(self) -> Path:
        pass
        return Path("./logs/") / str(self)


@dataclass
class ExperimentNative(Experiment):
    def run(self) -> None:
        with open(self.get_log_file(), "wb") as f:
            while self.repetitions > 0:
                res = subprocess.run(["out/main"], stdout=subprocess.PIPE, check=True)
                f.write(res.stdout)
                self.repetitions -= 1
    
    def __str__(self) -> str:
        params = " ".join([ f"{k.lower()}={v}" for k,v in self.params.items() ])
        return f"{self.name} native {params}"
    
    def get_log_file(self) -> Path:
        return Path("./logs/") / str(self)

    @property
    def make_command(self) -> str:
        return f"{self.name}_native"


@dataclass
class ExperimentWasm(Experiment):
    def run(self):
        wd = os.getcwd()
        os.chdir("./out")
        """
        while self.repetitions > 0:
            res = subprocess.run([
                    "emrun",
                    "--browser",
                    "chrome",
                    "--log_stdout",
                    self.get_log_file(),
                    "index.html",
                ], 
                stdout=subprocess.PIPE,
                stderr=subprocess.DEVNULL,
                check=True
            )
            self.repetitions -= 1
            """
        with open(self.get_log_file(), "wb") as f:
            while self.repetitions > 0:
                res = subprocess.run([
                        "emrun",
                        "--kill_end",
                        "--browser",
                        "/usr/bin/google-chrome",
                        "--log_stdout",
                        "../logs/log",
                        "--log_stderr",
                        "../logs/err",
                        "--verbose",
                        "index.html",
                    ], 
                    stdout=subprocess.PIPE, 
                    stderr=subprocess.DEVNULL,
                )
                f.write(res.stdout)
                self.repetitions -= 1
                time.sleep(0.5)
                
        os.chdir(wd)
    
    @abstractmethod
    def __str__(self) -> str:
        pass
    
    @abstractmethod
    def get_log_file(self) -> Path:
        pass

    @property
    @abstractmethod
    def make_command(self) -> str:
        pass


class ExperimentWasmSingle(ExperimentWasm):
    def __str__(self):
        params = " ".join([ f"{k.lower()}={v}" for k,v in self.params.items() ])
        return f"{self.name} wasm_single {params}"

    def get_log_file(self) -> Path:
        return Path("../logs") / str(self)
    
    @property
    def make_command(self) -> str:
        return f"{self.name}_wasm_single"


class Lab(NamedTuple):
    experiments: List[Experiment]

    def run(self):
        for e in self.experiments:
            e.prepare()
            reps = e.repetitions
            logging.info(f"Finished making {e}")
            e.run()
            logging.info(f"Finished measuring {reps} times.")
                

##################


shutil.rmtree("logs", True)

os.makedirs("out", exist_ok=True)
os.mkdir("logs")

with open("experiments.yaml") as f:
    exs = yaml.load(f, Loader=yaml.SafeLoader)

experiments: List[Experiment] = []
for e in exs:
    arch = e['arch'].upper()
    if arch == "NATIVE":
        c = ExperimentNative
    elif arch == "WASM_SINGLE":
        c = ExperimentWasmSingle
    else:
        raise Exception("Not yet.")
    del e['arch']
    experiments.append(c(
        **e
    ))
lab = Lab(experiments)
lab.run()